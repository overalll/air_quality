import pandas as pd
import numpy as np
from collections import Counter
import matplotlib.pyplot as plt
from pyecharts.charts import Map
from pyecharts import options as opts
plt.rcParams['font.sans-serif']=['SimHei']
plt.rcParams['axes.unicode_minus']=False

class Data_analysis:

    def __init__(self, station, path, data_dic, variable):
        self.station = station
        self.path = path
        self.data_dic = data_dic
        self.variable = variable

    def read_data(self):
        data = pd.read_csv(self.path)
        listdata = ['No', 'year', 'month', 'day', 'hour', 'PM2.5', 'PM10', 'SO2',
                    'NO2', 'CO', 'O3', 'TEMP', 'PRES', 'DEWP', 'RAIN', 'wd', 'WSPM', 'station']
        for i in range(len(data)):
            key = data[listdata[0]][i]
            self.data_dic.setdefault(key, [])
            for j in range(1, 18):
                self.data_dic[key].append(data[listdata[j]][i])
        print(self.data_dic[1])
        return

    def time_analysis(self):
        listdata = ['No', 'year', 'month', 'day', 'hour', 'PM2.5', 'PM10', 'SO2',
                    'NO2', 'CO', 'O3', 'TEMP', 'PRES', 'DEWP', 'RAIN', 'wd', 'WSPM', 'station']
        day_pollute = {}
        n = len(self.data_dic)
        if self.variable == 'wd':
            day_pollute[str(self.data_dic[1][0]) + f"{self.data_dic[1][1]:02d}" + f"{self.data_dic[1][2]:02d}"] = ''
            lis1 = []
            key1 = ''
            for i in range(n):
                key = str(self.data_dic[i + 1][0]) + f"{self.data_dic[i + 1][1]:02d}" + f"{self.data_dic[i + 1][2]:02d}"
                if key in day_pollute:
                    lis1.append(self.data_dic[i + 1][14])
                    key1 = key
                else:
                    number = Counter(lis1)
                    result = number.most_common()
                    day_pollute[key1] = result[0][0]
                    day_pollute[key] = ''
                    lis1.clear()
            number = Counter(lis1)
            result = number.most_common()
            day_pollute[str(self.data_dic[n][0]) + f"{self.data_dic[n][1]:02d}" + f"{self.data_dic[n][2]:02d}"] = \
            result[0][0]
        else:
            day_pollute[str(self.data_dic[1][0]) + f"{self.data_dic[1][1]:02d}" + f"{self.data_dic[1][2]:02d}"] = ''
            key2 = ''
            num = 0
            count = 0
            for j in range(n):
                key = str(self.data_dic[j + 1][0]) + f"{self.data_dic[j + 1][1]:02d}" + f"{self.data_dic[j + 1][2]:02d}"
                if key in day_pollute:
                    num += self.data_dic[j + 1][listdata.index(self.variable)]
                    count += 1
                    key2 = key
                else:
                    day_pollute[key2] = num / count
                    day_pollute[key] = ''
                    num = 0
                    count = 0
            day_pollute[str(self.data_dic[n][0]) + f"{self.data_dic[n][1]:02d}" + f"{self.data_dic[n][2]:02d}"] = num / count
        return day_pollute

    def spatial_analysis(self, year, month, day, hour):
        listdata = ['No', 'year', 'month', 'day', 'hour', 'PM2.5', 'PM10', 'SO2',
                    'NO2', 'CO', 'O3', 'TEMP', 'PRES', 'DEWP', 'RAIN', 'wd', 'WSPM', 'station']
        for i in range(len(self.data_dic)):
            if self.data_dic[i+1][0] == year:
                if self.data_dic[i+1][1] == month:
                    if self.data_dic[i+1][2] == day:
                        if self.data_dic[i+1][3] == hour:
                            return self.data_dic[i+1][listdata.index(self.variable)]
        return 0


class Visualization:
    def __init__(self, station, day_pollute, variable, plist):
        self.station = station
        self.day_pollute = day_pollute
        self.variable = variable
        self.plist = plist

    def time_show(self, year):
        if self.variable == 'wd':
            x = np.array(['E', 'ENE', 'NE', 'NNE', 'N', 'NNW', 'NW', 'WNW', 'W', 'WSW', 'SW', 'SSW', 'S', 'SSE', 'SE', 'ESE'])
            xx = ['E', 'ENE', 'NE', 'NNE', 'N', 'NNW', 'NW', 'WNW', 'W', 'WSW', 'SW', 'SSW', 'S', 'SSE', 'SE', 'ESE']
            y = []
            z = []
            for i in self.day_pollute:
                if year in i:
                    z.append(self.day_pollute[i])
            for j in xx:
                y.append(z.count(j))
            y = np.array(y)
            angles = np.linspace(0, 2*np.pi, 16, endpoint=False)
            y = np.concatenate((y, [y[0]]))
            angles = np.concatenate((angles, [angles[0]]))
            x = np.concatenate((x, [x[0]]))
            fig = plt.figure(facecolor='white')
            plt.subplot(111, polar=True)
            plt.plot(angles, y, 'bo-', color='r', linewidth=2)
            plt.fill(angles, y, facecolor='g', alpha=0.25)
            plt.thetagrids(angles * 180 / np.pi, x)
            plt.figtext(0.52, 0.95, '风向', ha='center')
            plt.grid()
            plt.show()
        else:
            x = []
            y = []
            c = 0
            for j in self.day_pollute:
                if year in j:
                    y.append(self.day_pollute[j])
                    c += 1
            for i in range(c):
                x.append(i+1)
            fig = plt.figure(1)
            plt.scatter(x, y, c='b', alpha=0.5, marker='o')
            plt.plot(x, y)
            plt.title(self.variable+'随时间变化')
            plt.show()

    def spaceshow(self):
        stations = ['朝阳区', '昌平区', '东城区', '西城区', '石景山区', '怀柔区', '顺义区', '海淀区']
        index = [0, 1, 3, 4, 5, 6, 8, 10]
        data = []
        for i in index:
            data.append(self.plist[i])
        print(data)
        data_bj = list(zip(stations, data))
        print(data_bj)
        counties = (
            Map()
            .add(
                '北京',
                data_bj,
                maptype='北京',
                label_opts=opts.LabelOpts(is_show=False),
            )
            .set_global_opts(
                title_opts=opts.TitleOpts(),
                visualmap_opts=opts.VisualMapOpts(is_piecewise=True,
                                                  pieces=[
                                                      {"min": 26, "label": '>26', "color": "#fc5a50"},
                                                      {"min": 21, "max": 25, "label": '21-25', "color": "#fea993"},
                                                      {"min": 16, "max": 20, "label": '16-20', "color": "#ffb07c"},
                                                      {"min": 11, "max": 15, "label": '11-15', "color": "#f1da7a"},
                                                      {"min": 6, "max": 10, "label": '6-10', "color": "#8ab8fe"},
                                                      {"min": 0, "max": 5, "label": '0-5', "color": "#c1c6fc"},
                                                  ]))
            .set_series_opts(label_opts=opts.LabelOpts(is_show=False, position='leftBottom'))
            .render('空间分析.html')
        )


class NotNumError(ValueError):
    def __init__(self, region, year, month, day, hour, pollutant):
        self.region = region
        self.year = year
        self.month = month
        self.day = day
        self.hour = hour
        self.pollutant = pollutant
        self.message = str(self.year) + '年' + str(self.month) + '月' + str(self.day) + '日' + str(self.hour) + '时' + self.region + self.pollutant

def exam(stations):
    listdata = ['year', 'month', 'day', 'hour', 'PM2.5', 'PM10', 'SO2',
                    'NO2', 'CO', 'O3', 'TEMP', 'PRES', 'DEWP', 'RAIN', 'wd', 'WSPM', 'station']
    for path in stations:
        topath = 'D:\pyctry\one\PRSA_Data_20130301-20170228\PRSA_Data_'+path+'_20130301-20170228.csv'
        df = pd.read_csv(topath)
        df = df.iloc[:, 1:18]
        try:
            a, b = np.where(df.isnull())
            if len(a) > 0:
                j = 0
                for i in a:
                    region = path
                    year = df.loc[i, 'year']
                    month = df.loc[i, 'month']
                    day = df.loc[i, 'day']
                    hour = df.loc[i, 'hour']
                    pollutant = listdata[b[j]]
                    j += 1
                    raise NotNumError(region, year, month, day, hour, pollutant)
        except NotNumError as N:
            print(N.message)



def main():
    stations = ['Aotizhongxin', 'Changping', 'Dingling', 'Dongsi', 'Guanyuan','Gucheng',
               'Huairou', 'Nongzhanguan', 'Shunyi', 'Tiantan', 'Wanliu', 'Wanshouxigong']
    station = 'Aotizhongxin'
    paths = []
    for sta in stations:
        paths.append('D:\pyctry\one\PRSA_Data_20130301-20170228\PRSA_Data_'+sta+'_20130301-20170228.csv')
    path = paths[stations.index(station)]
    variable = 'SO2'
    data_dic = {}
    A = Data_analysis(station, path, data_dic, variable)
    A.read_data()
    day_pollute = A.time_analysis()
    print(day_pollute)
    plist = []
    for i in stations:
        ddic = {}
        B = Data_analysis(i, paths[stations.index(i)], ddic, variable)
        B.read_data()
        x = B.spatial_analysis(2013, 3, 1, 0)
        plist.append(x)
    print(plist)
    C = Visualization(station, day_pollute, variable, plist)
    C.time_show('2013')
    C.spaceshow()
    exam(stations)
    return


main()
